amcl:
  ros__parameters:
    use_sim_time: True
    tf_broadcast: False
    alpha1: 0.005
    alpha2: 0.005
    alpha3: 0.005 
    alpha4: 0.005
    alpha5: 0.005
    base_frame_id: "base_footprint"
    global_frame_id: "map"
    odom_frame_id: "odom"
    max_particles: 2000
    min_particles: 500
    robot_model_type: "omnidirectional"
    save_pose_rate: 0.5
    transform_tolerance: 0.2
    update_min_a: 0.2
    update_min_d: 0.25
    set_initial_pose: true
    initial_pose: {0.0, 0.0, 0.0, 0.0}
    scan_topic: scan
    sigma_hit: 0.1
    z_hit: 0.9
    laser_likelihood_max_dist: 4.0

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    transform_tolerance: 0.1
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odometry/filtered
    default_bt_xml_filename: "nav_bt.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001 # don't filter y velocity messages
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    # goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]
    # controller_plugins: ["DynamicFollowPath"] # change also in nav_bt.xml
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.2
      stateful: True
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      min_vel_x: -0.2
      min_vel_y: -0.3
      max_vel_x: 0.58
      max_vel_y: 0.3
      min_speed_xy: 0.0
      max_speed_xy: 0.5
      acc_lim_x: 0.5
      acc_lim_y: 0.3
      decel_lim_x: -0.5
      decel_lim_y: -0.3

      max_vel_theta: 0.3
      min_speed_theta: 0.0
      acc_lim_theta: 0.5
      decel_lim_theta: -0.5

      vx_samples: 10
      vy_samples: 10
      vtheta_samples: 10

      sim_time: 2.0
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.25
      stateful: True

      trans_stopped_velocity: 0.1  
      rot_stopped_velocity: 0.05  
      
      critics: ["BaseObstacle", "GoalAlign", "GoalDist", "Oscillation", "PathAlign", "PathDist", "RotateToGoal", "Twirling"]
      BaseObstacle.scale: 0.02 # Scores a trajectory based on where the path passes over the costmap. To use this properly, you must use the inflation layer in costmap to expand obstacles by the robot's radius.
      PathAlign.scale: 32.0 # Scores a trajectory based on how well it is aligned to the path provided by the global planner.
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 50.0  # Scores a trajectory based on how well aligned the trajectory is with the goal pose.
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0 # Scores a trajectory based on how far it ends up from the path provided by the global planner. 
      GoalDist.scale: 50.0 # Scores a trajectory based on how close the trajectory gets the robot to the goal pose.
      RotateToGoal.scale: 32.0 # Only allows the robot to rotate to the goal orientation when it is sufficiently close to the goal location
      Oscilation.scale: 1.0 #  Prevents the robot from just moving backwards and forwards.
      Twirling.scale: 1.0 # Prevents holonomic robots from spinning as they make their way to the goal.
    DynamicFollowPath:
    # https://github.com/rst-tu-dortmund/teb_local_planner_tutorials/blob/melodic-devel/cfg/omnidir/teb_local_planner_params.yaml
      plugin: teb_local_planner::TebLocalPlannerROS
      footprint_model.type: "polygon"
      footprint_model.vertices: "[[0.36, 0.3775], [0.36, -0.3775], [-0.36, -0.3775], [-0.36, 0.3775]]"
      # footprint_model.type: "point"
      # min_obstacle_dist: 0.3 # This value must also include our robot radius, since footprint_model is set to "point".
      inflation_dist: 0.6
      include_dynamic_obstacles: True
      dynamic_obstacle_inflation_dist: 0.6

      costmap_converter_plugin: costmap_converter::CostmapToPolygonsDBSMCCH
      costmap_converter_spin_thread: True
      costmap_converter_rate: 5
      enable_homotopy_class_planning: True
      enable_multithreading: True
      # weight_obstacle: 100.0
      optimization_verbose: False
      teb_autoresize: True
      min_samples: 3
      max_samples: 500
      max_global_plan_lookahead_dist: 3.0
      visualize_hc_graph: True
      max_vel_x: 0.5
      max_vel_x_backwards: 0.2
      max_vel_y: 0.3
      max_vel_theta: 0.3
      acc_lim_x: 0.5
      acc_lim_y: 0.3
      acc_lim_theta: 0.5
      min_turning_radius: 0.0 # omni-drive robot (can turn on place!)
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.1
      weight_kinematics_nh: 1.0 #http://wiki.ros.org/teb_local_planner/Tutorials/Planning%20for%20holonomic%20robots

   
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: True
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      # robot_radius: 0.55
      footprint: "[[0.36, 0.3775], [0.36, -0.3775], [-0.36, -0.3775], [-0.36, 0.3775]]" # prostokatne wymiary robota
      footprint_padding: 0.1
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.58
        inflation_radius: 1.0
        inflate_around_unknown: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: true
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          obstacle_range: 4.0
          raytrace_range: 5.0
          marking: True
          clearing: True
          data_type: "LaserScan"
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      # robot_radius: 0.55
      footprint: "[[0.36, 0.3775], [0.36, -0.3775], [-0.36, -0.3775], [-0.36, 0.3775]]" # prostokatne wymiary robota
      footprint_padding: 0.1
      resolution: 0.04
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # obstacle layer to add changes to a map
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: true
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          obstacle_range: 4.0
          raytrace_range: 5.0
          marking: True
          clearing: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        subscribe_to_updates: True

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.58
        inflation_radius: 1.0
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "lab_updated.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.1
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3
    min_rotational_vel: -0.3
    rotational_acc_lim: 0.5

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "waypoint_task_executor"   
    waypoint_task_executor:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 5.0